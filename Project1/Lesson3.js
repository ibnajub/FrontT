
// JS

// 2.2 Есть переменная name
// Если в переменную вписана строка, то выводим в консоль сообщение "Привет, ЗНАЧНИЕ_NAME" Если в переменную вписана не строка, а любой другой тип данных, 
// то выводим сообщение "Ошибка, не тот тип данных"
const name = 'Vasya';
const name1 = 123;
console.log(typeof name === 'string' ? `Привет, ${name}` : 'Ошибка, не тот тип данных')  // Hello Vasya 
console.log(typeof name1 === 'string' ? `Привет, ${name1}` : 'Ошибка, не тот тип данных')  // Hello Vasya 

// 3.3 Есть массив ['Капуста', 'Репа', 'Редиска', 'Морковка']. Надо вывести в консоль строку 'Капуста | Репа | Редиска | Морковка';
const veg = ['Капуста', 'Репа', 'Редиска', 'Морковка']
console.log(veg.join(' | '))

// Есть строка 'Вася;Петя;Вова;Олег'.Используя стандартные методы строк получить массив их имен;
const stVasja = 'Вася;Петя;Вова;Олег'
// const newArr = stVasja.split(';'); // ["Вася", "Петя", "Вова", "Олег"]
console.log(stVasja.split(';'))

// Напишите функцию hello2(), которая при вызове будет принимать переменную (в аргументы) name (например, «Василий») и выводить строку (в нашем случае «Привет, Василий»).
//  В случае отсутствующего аргумента выводить «Привет, гость»
function hello2(name_arg = '') {
    console.log(name_arg === '' ? 'Привет, гость' : `Привет, ${name_arg}`)
}
hello2(name);
hello2();

// Есть массив ['яблоко', 'ананас', 'груша'] Привести каждый элемент массива в верхний регистр (сделать все слово большими буквами) и получить результат (новый массив) в новую переменную.
// const fruits = ['яблоко', 'ананас', 'груша'];
// const fruitsInUpperCase = ....; // тут должен быть массив, в котором ['ЯБЛОКО', 'АНАНАС', 'ГРУША']
let fruits = ['яблоко', 'ананас', 'груша']
let fruitsInUpperCase = fruits.map((item) => {
    return item.toUpperCase()
})

console.log(fruitsInUpperCase)


// Написать функцию addOneForAll, которая может принять неограниченное кол-во аргументов. Добавить к каждому аргументу 1 и вернуть новый массив с новыми значениями.
// Пример:
//     передал в массив такие числа - 1, 2, 3, 4
//     функция добавляет к каждому числу + 1
//     функция возвращает новый массив, в котором новые значения
const addOneForAll = (...msArg) => {
    return msArg.map((item) => {
        return ++item
    })

}

console.log(addOneForAll(2, 3, 4, 5, 10));

// Написать функцию getSum, которая может принять неограниченное кол-во аргументов и возвращает их сумму.
getSum = (...mArgs) => {
    let sum = 0
    mArgs.forEach(function (item, i, arr) {
        sum += item
    })
    return sum
}

const val = getSum(1, 2, 3, 4);
console.log(val); // 10


// Есть массив [1, 'hello', 2, 3, 4, '5', '6', 7, null]. Отфильтровать массив так, чтобы остались только числа. Сделать можно любым способом из того, что учили.
// [1, 2, 3, 4, 7];
const arr = [1, 'hello', 2, 3, 4, '5', '6', 7, null];

const numberArray = arr.filter(function (item, i, arr) {
    return (typeof item === 'number')
});

console.log(numberArray); // 10

// Написать функцию arrayTesting, которая принимает в себя любой массив (в аргументы). Функция проверяет есть ли в массиве хоть одно true значение и если оно есть,
// то возвращаем из функции строку 'Нашли true значение', если его нет - 'Ничего нет'
arrayTesting = (argM) => {
    return argM.some(el => el == true) ? 'Нашли true значение' : 'Ничего нет'
}

const haveTrueValue = arrayTesting([0, false, null, 1]); // Нашли true значение (потому что есть хотябы одно true значение - 1)
console.log(haveTrueValue); 

const dontHaveTrueValue = arrayTesting([0, false, null, 0]); // Ничего нет
console.log(dontHaveTrueValue); 